---
- name: "Self-Hosted: Configure Docker services"
  hosts: raspberrys
  become: yes
  remote_user: "{{ username }}"
  tasks:
    - name: "Docker Compose: Self-Hosted Services"
      community.docker.docker_compose:
        project_name: self-hosted
        definition:
          services:
            #
            # Traefik: HTTP reverse proxy and load balancer
            # https://github.com/traefik/traefik
            #
            traefik:
              image: traefik:v2.5
              container_name: traefik
              restart: unless-stopped
              environment:
                CF_API_EMAIL: "{{ vault_cloudflare_api_email }}"
                CF_DNS_API_TOKEN: "{{ vault_cloudflare_token }}"
                CF_ZONE_API_TOKEN: "{{ vault_cloudflare_token }}"
                # Traefik Pilot instance: https://pilot.traefik.io/
                TRAEFIK_PILOT_TOKEN: "{{ vault_traefik_pilot_token }}"
              volumes:
                - /etc/traefik/rules.toml:/etc/traefik/rules.toml
                - /var/run/docker.sock:/var/run/docker.sock
                - /var/lib/traefik/letsencrypt:/letsencrypt
                - /var/log/traefik:/var/log/traefik
              ports:
                - '80:80'
                - '443:443'
              command:
                - --api=true
                # Enable logs
                - --log.level=info
                - --accesslog=true
                - --accesslog.filepath=/var/log/traefik/access.log
                - --accesslog.fields.headers.names.Content-Type=keep
                - --accesslog.fields.headers.names.Referer=keep
                - --accesslog.fields.headers.names.User-Agent=keep
                # Enable Traefik file provider
                - --providers.file=true
                - --providers.file.filename=/etc/traefik/rules.toml
                - --providers.file.watch=true
                # Enable Docker provider
                - --providers.docker=true
                - --providers.docker.exposedByDefault=false
                # Open http and https connections for Incoming Requests
                - --entrypoints.web.address=:80
                - --entrypoints.websecure.address=:443
                - --entrypoints.websecure.http.tls.certresolver=letsencrypt
                - --entrypoints.websecure.http.tls.domains[0].main=*.{{ server_domain }}
                # Let's Encrypt certificate resolver via CloudFlare DNS challenge
                - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
                - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
                - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
                - --certificatesresolvers.letsencrypt.acme.email={{ vault_letsencrypt_email }}
                - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
                - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers==1.1.1.1:53,1.0.0.1:53
              labels:
                - traefik.enable=true
                # Middleware to redirect http requests to https
                - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
                # Define 'http-catchall' router to redirect http requests to https
                - traefik.http.routers.http-catchall.entrypoints=web
                - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
                - traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker
                # Middleware to provide OAuth authentication
                - traefik.http.middlewares.traefik-forward-auth.forwardauth.address=http://auth:4181
                - traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders=X-Forwarded-User
                # Middleware to allow access only for LAN subnet IPs
                - traefik.http.middlewares.lanfilter.ipwhitelist.sourcerange=127.0.0.1/32,{{ server_subnet }}
                # Dashboard configuration
                - traefik.http.routers.traefik-router.tls=true
                - traefik.http.routers.traefik-router.entrypoints=websecure
                - traefik.http.routers.traefik-router.service=api@internal
                - traefik.http.routers.traefik-router.rule=Host(`traefik.{{ server_domain }}`)
                - traefik.http.routers.traefik-router.middlewares=traefik-forward-auth@docker
                - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
              networks:
                - traefik-net
                - auth-net
                - adguard-net
                - gluetun-net
                - gerbera-net
                - vaultwarden-net
                - homeassistant-net
                - vuetorrent-net
            #
            # Traefik Forward Auth
            # https://github.com/thomseddon/traefik-forward-auth
            #
            traefik-forward-auth:
              image: thomseddon/traefik-forward-auth:2.2-arm
              container_name: auth
              restart: unless-stopped
              environment:
                AUTH_HOST: "auth.{{ server_domain }}"
                COOKIE_DOMAIN: "{{ server_domain }}"
                PROVIDERS_GOOGLE_CLIENT_ID: "{{ vault_auth_google_client_id }}"
                PROVIDERS_GOOGLE_CLIENT_SECRET: "{{ vault_auth_google_client_secret }}"
                SECRET: "{{ vault_auth_secret }}"
                WHITELIST: "{{ vault_auth_whitelist }}"
              labels:
                - traefik.enable=true
                - traefik.docker.network=auth-net
                - traefik.http.routers.auth-router.tls=true
                - traefik.http.routers.auth-router.entrypoints=websecure
                - traefik.http.routers.auth-router.rule=Host(`auth.{{ server_domain }}`)
                - traefik.http.routers.auth-router.middlewares=traefik-forward-auth
                - traefik.http.routers.auth-router.service=forward-auth
                - traefik.http.services.forward-auth.loadbalancer.server.port=4181
              networks:
                - auth-net
            #
            # Cloudflare Companion - Autoupdate Cloudflare DNS records
            # https://github.com/tiredofit/docker-traefik-cloudflare-companion
            #
            cloudflare-companion:
              image: tiredofit/traefik-cloudflare-companion:6.7.0
              container_name: cloudflare
              restart: unless-stopped
              environment:
                TRAEFIK_VERSION: 2
                CF_TOKEN: "{{ vault_cloudflare_token }}"
                TARGET_DOMAIN: "core.{{ server_domain }}"
                DOMAIN1: "{{ server_domain }}"
                DOMAIN1_ZONE_ID: "{{ vault_cloudflare_domain_zone_id }}"
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock
            #
            # AdGuard Home: Ad blocking and privacy protection software
            # https://github.com/AdguardTeam/AdGuardHome
            #
            adguard:
              image: adguard/adguardhome:latest
              container_name: adguard
              restart: unless-stopped
              volumes:
                - /mnt/storage/Services/adguard/data:/opt/adguardhome/work
                - /mnt/storage/Services/adguard/conf:/opt/adguardhome/conf
              ports:
                - '53:53/tcp'
                - '53:53/udp'
              labels:
                - traefik.enable=true
                - traefik.docker.network=adguard-net
                - traefik.http.routers.adguard-router.tls=true
                - traefik.http.routers.adguard-router.entrypoints=websecure
                - traefik.http.routers.adguard-router.rule=Host(`adguard.{{ server_domain }}`)
                - traefik.http.routers.adguard-router.service=adguard-home
                # NB: Replace port 80 with 3000 for the first time run.
                - traefik.http.services.adguard-home.loadbalancer.server.port=80
              networks:
                - adguard-net
            #
            # Gluetun: Lightweight Swiss-knife VPN client
            # https://github.com/qdm12/gluetun
            #
            gluetun:
              image: qmcgaw/gluetun:latest
              container_name: gluetun
              restart: unless-stopped
              cap_add:
                - NET_ADMIN
              environment:
                TZ: "{{ timezone }}"
                VPNSP: "{{ gluetun_vpn_service }}"
                COUNTRY: "{{ gluetun_vpn_country }}"
                # OpenVPN:
                OPENVPN_USER: "{{ gluetun_openvpn_user }}"
                OPENVPN_PASSWORD: "{{ gluetun_openvpn_pass }}"
                # Wireguard:
                # WIREGUARD_PRIVATE_KEY: "{{ vault_wireguard_key }}"
                # WIREGUARD_ADDRESS: "{{ vault_wireguard_address }}"
                HTTPPROXY: 'on'
              volumes:
                - /mnt/storage/Services/gluetun:/gluetun
              ports:
                - 8888:8888/tcp # HTTP proxy
                - 8388:8388/tcp # Shadowsocks
                - 8388:8388/udp # Shadowsocks
              labels:
                - traefik.enable=true
                - traefik.docker.network=gluetun-net
                - traefik.http.routers.gluetun-router.service=gluetun
                - traefik.http.services.gluetun.loadbalancer.server.port=8000
              networks:
                - gluetun-net
            #
            # Gerbera - UPnP Media Server
            # https://github.com/gerbera/gerbera
            #
            gerbera:
              image: gerbera/gerbera:latest
              container_name: gerbera
              restart: unless-stopped
              volumes:
                - /mnt/storage/Services/gerbera:/var/run/gerbera
                - /mnt/storage/Musica:/content/Musica:ro
              network_mode: host
            #
            # Vaultwarden - Bitwarden server written in Rust
            # https://github.com/dani-garcia/vaultwarden
            #
            vaultwarden:
              image: vaultwarden/server:latest
              container_name: vaultwarden
              restart: unless-stopped
              environment:
                DOMAIN: "https://pass.{{ server_domain }}"
                INVITATIONS_ALLOWED: "false"
                SIGNUPS_ALLOWED: "false"
                SHOW_PASSWORD_HINT: "false"
                WEBSOCKET_ENABLED: "true"
              volumes:
                - /mnt/storage/Services/vaultwarden/data/:/data
              labels:
                - traefik.enable=true
                - traefik.docker.network=vaultwarden-net
                # Vaultwarden UI configuration
                - traefik.http.routers.vaultwarden-ui-router.tls=true
                - traefik.http.routers.vaultwarden-ui-router.entrypoints=websecure
                - traefik.http.routers.vaultwarden-ui-router.rule=Host(`pass.{{ server_domain }}`)
                - traefik.http.routers.vaultwarden-ui-router.service=vaultwarden-ui
                - traefik.http.services.vaultwarden-ui.loadbalancer.server.port=80
                # Vaultwarden websocket configuration
                - traefik.http.routers.vaultwarden-ws-router.tls=true
                - traefik.http.routers.vaultwarden-ws-router.entrypoints=websecure
                - traefik.http.routers.vaultwarden-ws-router.rule=Host(`pass.{{ server_domain }}`) && Path(`/notifications/hub`)
                - traefik.http.routers.vaultwarden-ws-router.service=vaultwarden-ws
                - traefik.http.services.vaultwarden-ws.loadbalancer.server.port=3012
              networks:
                - vaultwarden-net
            #
            # Home Assistant: Open source home automation
            # https://github.com/home-assistant/docker
            #
            homeassistant:
              image: homeassistant/home-assistant:latest
              container_name: homeassistant
              restart: unless-stopped
              environment:
                TZ: "{{ timezone }}"
              volumes:
                - /mnt/storage/Services/homeassistant/config:/config
              labels:
                - traefik.enable=true
                - traefik.docker.network=homeassistant-net
                - traefik.http.routers.hass-router.tls=true
                - traefik.http.routers.hass-router.entrypoints=websecure
                - traefik.http.routers.hass-router.rule=Host(`hass.{{ server_domain }}`)
                - traefik.http.routers.hass-router.service=home-assistant
                - traefik.http.services.home-assistant.loadbalancer.server.port=8123
              networks:
                - homeassistant-net
            #
            # qbittorrent + VueTorrent: Torrent client
            # https://hotio.dev/containers/qbittorrent/
            #
            vuetorrent:
              image: hotio/qbittorrent:release-0cb2b3c-326-linux-arm-v7
              container_name: vuetorrent
              restart: unless-stopped
              environment:
                TZ: "{{ timezone }}"
                PUID: 1000
                PGID: 1000
                UMASK: 002
              volumes:
                - /mnt/storage/Services/vuetorrent:/config
                - /mnt/storage/Scaricati:/config/downloads
              labels:
                - traefik.enable=true
                - traefik.docker.network=vuetorrent-net
                - traefik.http.routers.vuetor-router.tls=true
                - traefik.http.routers.vuetor-router.entrypoints=websecure
                - traefik.http.routers.vuetor-router.rule=Host(`torrent.{{ server_domain }}`)
                - traefik.http.routers.vuetor-router.service=vuetorrent
                - traefik.http.services.vuetorrent.loadbalancer.server.port=8080
              network_mode: service:gluetun
          networks:
            auth-net: {}
            traefik-net: {}
            adguard-net: {}
            gluetun-net: {}
            gerbera-net: {}
            vaultwarden-net: {}
            homeassistant-net: {}
            vuetorrent-net: {}
        build: yes
        state: present
        stopped: no
        restarted: yes
